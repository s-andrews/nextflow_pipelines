#!/usr/bin/env nextflow
nextflow.enable.dsl=2

// Last modified on 12 October 2020

params.outdir = "."
params.fastq_screen_args = ''
params.verbose = false
params.single_end = false  // default mode is auto-detect. NOTE: params are handed over automatically  

if (params.verbose){
    println ("[WORKFLOW] FASTQ SCREEN ARGS ARE: " + params.fastq_screen_args)
}

params.help = false
// Show help message and exit
if (params.help){
    helpMessage()
    exit 0
}

include { makeFilesChannel; getFileBaseNames } from './nf_modules/files.mod.nf'
include { FASTQ_SCREEN }                       from './nf_modules/fastq_screen.mod.nf'

file_ch = makeFilesChannel(args)

workflow {

    main:
        FASTQ_SCREEN(file_ch, params.outdir, params.fastq_screen_args, params.verbose)

}

// Since workflows with very long command lines tend to fail to get rendered at all, I was experimenting with a
// minimal execution summary report so we at least know what the working directory was...
workflow.onComplete {

    def msg = """\
        Pipeline execution summary
        ---------------------------
        Jobname     : ${workflow.runName}
        Completed at: ${workflow.complete}
        Duration    : ${workflow.duration}
        Success     : ${workflow.success}
        workDir     : ${workflow.workDir}
        exit status : ${workflow.exitStatus}
        """
    .stripIndent()

    sendMail(to: "${workflow.userName}@babraham.ac.uk", subject: 'Minimal pipeline execution report', body: msg)
}

def helpMessage() {
 
    log.info"""
    >>

    
    This workflow takes in a list of filenames in FastQ format, and runs FastQ Screen on these files on the Babraham Stone cluster
    against at wide range of standard genomes we use to assess contamination at Babraham.
    
    If you run FastQ Screen in this stand-alone workflow it is assumed that you know what you are doing, e.g. in --bisulfite mode,
    raw FastQ files should have been trimmed appropriately (non-bisulfite samples are aligned in local mode, making adapter trimming
    less of an issue). To supply additional non-standard parameters, please consider supplying tool-specific arguments that are compatible
    with FastQ Screen (see '--fastq_screen_args' below).

    USAGE:
    
    nf_fastq_screen [options] <input files>
    
    Mandatory arguments:
    ====================

      <input_files>                   List of input files, e.g. '*fastq.gz' or '*fq.gz'. Files will automatically be processed as
                                      single-end or paired end files (if file pairs share the same base-name, and differ only by a
                                      different read number, e.g. 'base_name_R1.fastq.gz' and 'base_name_R2.fastq.gz' (or R3, R4).
                                      For paired-end files, only Read 1 is run through FastQ Screen (as typically R1 and R2 produce
                                      nearly identical contamination profiles). To run all specifed files (i.e. even Read 2 of
                                      paired-end files) through FastQ Screen, please see the option '--single_end' below.


    Tool-Specific Options:
    ======================

      --fastq_screen_args="[str]"     This option can take any number of options that are compatible with FastQ Screen to modify its
                                      default mapping behaviour. For more detailed information on available options please refer
                                      to the FastQ Screen documentation, or run 'fastq_screen --help' on the command line. For instance,
                                      to process a bisulfite converted library with fairly relaxed parameters, you could use: 
                                      ' --fastq_screen_args="--bisulfite" '. Please note that the format="your options" needs to be 
                                      strictly adhered to in order to work correctly.
                                      [Default: None]

    Other Options:
    ==============

      --outdir [str]                  Path to the output directory. [Default: current working directory]
    
      --bisulfite                     Can be used directly to indicate data is Bisulfite-seq.
      
      --single_end                    Force files of a read pair to be treated as single-end files. [Default: auto-detect]
      
      --verbose                       More verbose status messages. [Default: OFF]
      --help                          Displays this help message and exits.

    Workflow Options:
    =================

    Please note the single '-' hyphen for the following options!

      -resume                         If a pipeline workflow has been interrupted or stopped (e.g. by accidentally closing a laptop),
                                      this option will attempt to resume the workflow at the point it got interrupted by using
                                      Nextflow's caching mechanism. This may save a lot of time.

      -bg                             Sends the entire workflow into the background, thus disconnecting it from the terminal session.
                                      This option launches a daemon process (which will keep running on the headnode) that watches over
                                      your workflow, and submits new jobs to the SLURM queue as required. Use this option for big pipeline
                                      jobs, or whenever you do not want to watch the status progress yourself. Upon completion, the
                                      pipeline will send you an email with the job details. This option is HIGHLY RECOMMENDED!

      -process.executor=local         Temporarily changes where the workflow is executed to the 'local' machine. See also the nextflow.config
                                      file for more details. [Default: slurm] 
    

    <<
    """.stripIndent()

}
